# To check number of running container | both running and not running
docker ps | docker ps -a

# To check number of images on the host 
docker images

# Run a container using the image   |    Run a container and specify the name   |   Run a container with tag and ports                         |   with environment variable        |   with network (default=bridge other options-none,host)
docker run <image>                  |    docker run -d --name <name> <image>    |   docker run -p <host-port>:<container-port> <image>:<tag>   |   docker run -e <env-var> <image>  |   docker run -d -e MYSQL_ROOT_PASSWORD=<password> --name <name> --network <network-name> <image>

# Example 
docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql

# To run container in the background
docker run -d <image>

# Stop a container                      |   stop all containers
Ctrl+C / docker stop <container-id>     |   docker stop $(docker ps -aq)

# Delete a container        |   Delete all containers
docker rm <container-id>    |   docker rm $(docker ps -aq)

# Delete an image       |   Delete all images {STOP AND DELETE CONTAINERS BEFORE DELETING IMAGES}
docker rmi <image>      |   docker rmi $(docker images -aq) # Stop and delete containers before deleting images

# Pull an iamge
docker pull <image>

# PORTS
{}:{Port-published-on-the-Host}->{Port-exposed-on-container}/tcp   |   0.0.0.0:3456->3456/tcp

# To find base image used in Dockerfile
grep -i FROM /<Path>/Dockerfile

# To find any parameter in Dockerfile without opening
'cat Dockerfile-<image> | grep <parameter>'          |       cat Dockerfile-mysql | grep ENTRYPOINT           |           cat Dockerfile-wordpress | grep CMD

# To build image from Dockerfile
cd <desired_directory_with_Dockerfile>
docker build -t <image-name>:<tag> .      # "."(dot) indicates for the current directory

# To find base OS of the image
docker run <image> cat /etc/*release*

# To inspect a container            | To check environment variable
docker inspect <container-name>     | docker inspect <container-name> | grep -A 10 Env

# To know the env field from within a container
docker exec -it <container-name> env

# To check number of networks on the system |   To inspect bridge
docker network ls                           |   docker network inspect bridge

docker inspect alpine-1

# To create a new network
docker network create --driver bridge --subnet <subnet> --gateway <gateway> <network-name>

# To mount a volume to a container (default /var/lib/docker)
docker run -v <data-path>:/var/lib/<data> <image>       |       
docker run \
--mount type=bind,source=<data-path>,target=/var/lib/<data> <image>
 
# docker-compose.yml
'''
version: 3
services:
    redis:
        image: redis
        networks:
            - back-end

    db:
        image: postgres:9.4
        networks:
            - back-end

    vote:
        image: voting-app
        ports:
            - 5000:80
        networks:
            - front-end
            - back-end

    result:
        image: result
        networks:
            - front-end
            - back-end

    worker:
        image: worker
        networks:
            - back-end

networks:
    front-end:
    back-end:

'''
# run by
docker-compose up



